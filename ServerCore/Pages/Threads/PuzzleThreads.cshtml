@page "/{eventId}/{eventRole}/Threads/PuzzleThreads"
@model ServerCore.Pages.Threads.PuzzleThreadsModel
@{
    ViewData["Title"] = "Puzzle thread";
    ViewData["AdminRoute"] = "/Threads/PuzzleThreads";
    ViewData["AuthorRoute"] = "/Threads/PuzzleThreads";
    ViewData["PlayRoute"] = "/Threads/PuzzleThreads";

    bool isGameControlRole = Model.IsGameControlRole();
}

<div>
    @if (Model.EventRole == ServerCore.ModelBases.EventRole.play) 
    {
        <a asp-page="/Puzzles/Play">Go to puzzle list</a>
    }
    else
    {
        <a asp-page="/Puzzles/Index">Go to puzzle list</a>
    }

    @if (isGameControlRole)
    {
        @(" | ")
        @if (Model.InputParameters.HasFilterApplied())
        {
            <a asp-page="/Threads/PuzzleThreads" asp-route-refreshInterval="@Model.InputParameters.RefreshInterval">All threads</a>
        }
        else
        {
            <span>All threads</span>
        }

        @(" | ")
        @if (Model.InputParameters.ShowUnclaimedOnly.HasValue && Model.InputParameters.ShowUnclaimedOnly.Value)
        {
            <span>Unclaimed only</span>
        }
        else
        {
            <a asp-page="/Threads/PuzzleThreads" asp-route-showUnclaimedOnly="true" asp-route-puzzleId="@Model.InputParameters.PuzzleId" asp-route-playerId="@Model.InputParameters.PlayerId" asp-route-teamId="@Model.InputParameters.TeamId" asp-route-refreshInterval="@Model.InputParameters.RefreshInterval" asp-route-filterToSupportingPuzzlesOnly="@Model.InputParameters.FilterToSupportingPuzzlesOnly">Unclaimed only</a>
        }

        @if (!Model.Event.ShouldShowHelpMessageOnlyToAuthor)
        {
            @(" | ")
            @if (Model.InputParameters.FilterToSupportingPuzzlesOnly.HasValue && Model.InputParameters.FilterToSupportingPuzzlesOnly.Value)
            {
                <span>Your puzzles only</span>
            }
            else
            {
                <a asp-page="/Threads/PuzzleThreads" asp-route-showUnclaimedOnly="@Model.InputParameters.ShowUnclaimedOnly" asp-route-puzzleId="@Model.InputParameters.PuzzleId" asp-route-playerId="@Model.InputParameters.PlayerId" asp-route-teamId="@Model.InputParameters.TeamId" asp-route-refreshInterval="@Model.InputParameters.RefreshInterval" asp-route-filterToSupportingPuzzlesOnly="true">Your puzzles only</a>
            }
        }
    }
</div>
<h3>@Model.Title</h3>
@if (isGameControlRole)
{
    <div>
        Refresh every:
        @if (Model.InputParameters.RefreshInterval == 60)
        {
            <span>1 min</span>
        }
        else
        {
            <a asp-page="/Threads/PuzzleThreads" asp-route-refreshInterval="60" asp-route-puzzleId="@Model.InputParameters.PuzzleId" asp-route-playerId="@Model.InputParameters.PlayerId" asp-route-teamId="@Model.InputParameters.TeamId" asp-route-showUnclaimedOnly="@Model.InputParameters.ShowUnclaimedOnly" asp-route-filterToSupportingPuzzlesOnly="@Model.InputParameters.FilterToSupportingPuzzlesOnly">1 min</a>
        }

        @(" | ")
        @if (Model.InputParameters.RefreshInterval == 120)
        {
            <span>2 min</span>
        }
        else
        {
            <a asp-page="/Threads/PuzzleThreads" asp-route-refreshInterval="120" asp-route-puzzleId="@Model.InputParameters.PuzzleId" asp-route-playerId="@Model.InputParameters.PlayerId" asp-route-teamId="@Model.InputParameters.TeamId" asp-route-showUnclaimedOnly="@Model.InputParameters.ShowUnclaimedOnly" asp-route-filterToSupportingPuzzlesOnly="@Model.InputParameters.FilterToSupportingPuzzlesOnly">2 min</a>
        }

        @(" | ")
        @if (Model.InputParameters.RefreshInterval == 300)
        {
            <span>5 min</span>
        }
        else
        {
            <a asp-page="/Threads/PuzzleThreads" asp-route-refreshInterval="300" asp-route-puzzleId="@Model.InputParameters.PuzzleId" asp-route-playerId="@Model.InputParameters.PlayerId" asp-route-teamId="@Model.InputParameters.TeamId" asp-route-showUnclaimedOnly="@Model.InputParameters.ShowUnclaimedOnly" asp-route-filterToSupportingPuzzlesOnly="@Model.InputParameters.FilterToSupportingPuzzlesOnly">5 min</a>
        }

        @(" | ")
        @if (Model.InputParameters.RefreshInterval.HasValue)
        {
            <a asp-page="/Threads/PuzzleThreads" asp-route-puzzleId="@Model.InputParameters.PuzzleId" asp-route-playerId="@Model.InputParameters.PlayerId" asp-route-teamId="@Model.InputParameters.TeamId" asp-route-showUnclaimedOnly="@Model.InputParameters.ShowUnclaimedOnly" asp-route-filterToSupportingPuzzlesOnly="@Model.InputParameters.FilterToSupportingPuzzlesOnly">off</a>
        }
        else
        {
            <span>off</span>
        }

    </div>
}

<table class="table">
    <thead>
        <tr>
            @if (Model.IsGameControlRole())
            {
                <th>
                    Is handled
                </th>
            }
            <th>
                Thread
            </th>
            <th>
                Author(s)
            </th>
            <th>
                Timestamp
            </th>
            <th>
                Last message
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.LatestMessagesFromEachThread)
        {
            <tr>
                @if (Model.IsGameControlRole())
                {
                    <td>
                        @if (Model.IsLatestMessageUnclaimed(item))
                        {
                            <p>&#x26A0; Has unanswered question!</p>
                        }
                    </td>
                }
                <td>
                    <a asp-page="/Threads/PuzzleThread" asp-route-puzzleId="@item.PuzzleID" asp-route-teamId="@item.TeamID" asp-route-playerId="@item.PlayerID">@item.Subject</a>
                </td>
                <td>
                    @if (@item.PuzzleID.HasValue)
                    {
                        @Model.AuthorsForPuzzleID[item.PuzzleID.Value]
                    }
                </td>
                <td>
                    @Html.Raw(Model.LocalTime(@item.CreatedDateTimeInUtc))
                </td>
                <td>
                    @(item.Text.Length > 93 ? $"{item.Text.Substring(0, 90)}..." : item.Text)
                </td>
            </tr>
        }
    </tbody>
</table>
