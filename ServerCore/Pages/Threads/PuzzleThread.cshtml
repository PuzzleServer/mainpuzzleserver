@page "/{eventId}/{eventRole}/Threads/PuzzleThread/{puzzleId}"
@using ServerCore.DataModel
@model ServerCore.Pages.Threads.PuzzleThreadModel

@{
    ViewData["Title"] = "Puzzle thread";
    ViewData["AdminRoute"] = "/Threads/PuzzleThread";
    ViewData["AuthorRoute"] = "/Threads/PuzzleThread";
    ViewData["PlayRoute"] = "/Threads/PuzzleThread";
    ViewData["RoutingPuzzleId"] = ViewContext.RouteData.Values["puzzleId"];
}

<h2>Help thread</h2>
<div>
    @if (Model.EventRole == ServerCore.ModelBases.EventRole.play)
    {
        <a asp-page="/Submissions/Index" asp-route-puzzleId="@Model.Puzzle.ID">Back to puzzle</a>
    }
    else
    {
        <a asp-page="/Threads/PuzzleThreads">Back to thread list</a>
    }
</div>

<h4>Thread for puzzle @Model.Puzzle.Name</h4>
<hr />
@{
    bool shouldMakeDark = false;
}
@foreach (var message in Model.Messages)
{
    string classString = "message-container";
    if (shouldMakeDark) {
        classString += " message-darker";
    }

    if (message.IsFromGameControl) {
        classString += " message-game-control";
    }

    <div class="@classString">
        @{
            string senderName = message.Sender.Name;
            @if (message.IsFromGameControl)
            {
                senderName = Model.EventRole == ServerCore.ModelBases.EventRole.play
                ? "Game control"
                : $"Game control ({message.Sender.Name})";
            }
        }
        <p>[@Html.Raw(Model.LocalTime(@message.DateTimeInUtc))] @senderName</p>
        <p>@message.Text</p>
        @if (Model.IsAllowedToDeleteMessage(message))
        {
            <a asp-page-handler="DeleteMessage" asp-route-messageId="@message.ID" asp-route-puzzleId="@message.PuzzleID" onclick="return confirm('Are you sure you want to delete this message?')">Delete</a>
        }
    </div>
    shouldMakeDark = !shouldMakeDark;
}
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="NewMessage.Text" class="control-label"></label>
                <textarea asp-for="NewMessage.Text" class="form-control" rows="4" placeholder="Type message here" value="" autocomplete="off"></textarea>
                <span asp-validation-for="NewMessage.Text" class="text-danger"></span>
                <input type="hidden" asp-for="NewMessage.ThreadId" value="@Model.NewMessage.ThreadId" />
                <input type="hidden" asp-for="NewMessage.EventID" value="@Model.NewMessage.EventID" />
                <input type="hidden" asp-for="NewMessage.Subject" value="@Model.NewMessage.Subject" />
                <input type="hidden" asp-for="NewMessage.PuzzleID" value="@Model.NewMessage.PuzzleID" />
                <input type="hidden" asp-for="NewMessage.TeamID" value="@Model.NewMessage.TeamID" />
                <input type="hidden" asp-for="NewMessage.IsFromGameControl" value="@Model.NewMessage.IsFromGameControl" />
                <input type="hidden" asp-for="NewMessage.SenderID" value="@Model.NewMessage.SenderID" />
            </div>
            <div class="form-group">
                <input type="submit" value="Send" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>
@if (Model.IsAllowedToClaimMessage() && Model.Messages.Count > 0)
{
    Message lastMessage = Model.Messages.Last();
    <form method="post">
        @if (lastMessage.IsClaimed)
        {
            <br/>
            <p>Question has already been claimed by @lastMessage.Claimer.Name</p>
            <button type="submit" asp-page-handler="UnclaimThread" asp-route-messageId="@lastMessage.ID" asp-route-puzzleId="@lastMessage.PuzzleID">Unclaim question</button>
        }
        else
        {
            <br />
            <button type="submit" asp-page-handler="ClaimThread" asp-route-messageId="@lastMessage.ID" asp-route-puzzleId="@lastMessage.PuzzleID">Claim question</button>
        }
    </form>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
