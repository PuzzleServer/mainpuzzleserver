@page "/{eventId}/{eventRole}/Submissions/{puzzleId}"
@model ServerCore.Pages.Submissions.IndexModel

@{
    @using Helpers;

    if (Model.Event.EmbedPuzzles)
    {
            ViewData["Title"] = Model.Puzzle.Name;
    }
    else
    {
            ViewData["Title"] = "Create submissions";
    }
    ViewData["AdminRoute"] = "../Submissions/AuthorIndex";
    ViewData["AuthorRoute"] = "../Submissions/AuthorIndex";
    // TODO: Needs to handle implicit teams - ViewData["PlayRoute"] = "../Submissions/Index";
    ViewData["RoutingPuzzleId"] = ViewContext.RouteData.Values["puzzleId"];
}

@using System.Text @* for StringBuilder *@

@{
    var mailtoUrl = new StringBuilder("mailto:");

    // to: Add the proper support agent as recipient
    mailtoUrl.Append(Model.PuzzleState?.Puzzle.SupportEmailAlias ?? (Model.Event?.ContactEmail ?? "puzzhunt@microsoft.com"));
    mailtoUrl.Append("?");

    // CC the team's email address in case the account sending the e-mail is a personal one that's not associated with the event
    if (!Model.Puzzle.IsForSinglePlayer && Model.Team?.PrimaryContactEmail != null)
    {
        mailtoUrl.Append("cc=");
        mailtoUrl.Append(Uri.EscapeDataString(Model.Team.PrimaryContactEmail));
        mailtoUrl.Append("&");
    }

    // subject: Make this be about this puzzle
    mailtoUrl.Append("subject=");
    mailtoUrl.Append(Uri.EscapeDataString("[" + Model.Puzzle.PlaintextName + "]"));

    if (!Model.Puzzle.IsForSinglePlayer && Model.Team != null)
    {
        // subject: Make this be from this team
        mailtoUrl.Append(Uri.EscapeDataString(" [" + Model.Team.Name + "]"));
    }

    if (Model.PuzzleState.IsEmailOnlyMode)
    {
        // request out of email mode
        // subject: Add the Email Mode signifier
        mailtoUrl.Append(Uri.EscapeDataString(" [⚠EmailMode✉]"));
        // body: Invite solver to give details
        mailtoUrl.Append("&body=");
        mailtoUrl.Append(Uri.EscapeDataString("Use this email to fully explain your thought process so we know you're not randomly spamming attempts! 😇" + Environment.NewLine + Environment.NewLine));
    }
    else
    {
        // request for help
        // body: Invite solver to give details
        mailtoUrl.Append("&body=");
        mailtoUrl.Append(Uri.EscapeDataString("The more details you add here, the more helpful the responses you'll get will be! 😇" + Environment.NewLine + Environment.NewLine));
    }

    string puzzleFilePath = "";
    int embedType = 0; // Nothing
    if (Model.Puzzle.CustomURL != null)
    {
        puzzleFilePath = @PuzzleHelper.GetFormattedUrl(Model.Puzzle, Model.Event.ID);
    }
    else if (Model.Puzzle.PuzzleFile != null)
    {
        puzzleFilePath = @Model.Puzzle.PuzzleFile.Url.AbsoluteUri;
    }

    if (puzzleFilePath.Length > 0)
    {
        string lowerPath = puzzleFilePath.ToLowerInvariant();
        if (lowerPath.EndsWith(".pdf"))
        {
            embedType = 1;
        }
        else if ((lowerPath.EndsWith(".doc")) || (lowerPath.EndsWith(".docx")) || (lowerPath.EndsWith(".xls")) || (lowerPath.EndsWith(".xlsx")) || (lowerPath.EndsWith(".ppt")) || (lowerPath.EndsWith(".pptx")) || (lowerPath.EndsWith(".pub")))
        {
            embedType = 2;
        }
        else if ((lowerPath.EndsWith(".htm")) || (lowerPath.EndsWith(".html")))
        {
            embedType = 3;
        }
        else if ((lowerPath.EndsWith(".jpg")) || (lowerPath.EndsWith(".jpeg")) || (lowerPath.EndsWith(".png")) || (lowerPath.EndsWith(".bmp")) || (lowerPath.EndsWith(".gif")) || (lowerPath.EndsWith(".svg")))
        {
            embedType = 4;
        }
        else
        {
            // If the file isn't of a known file extension (or the URL has no file extension), we assume the URL is to an HTML page that can be embedded in an iframe
            // Ideally this file should be living on our website or its backing storage server, but in theory any embeddable webpage from any source can be shown
            // If this is not the case and the contents of the URL can't be embedded in an iframe, this code will need to be updated
            embedType = 3;
        }
    }
}

<style>
    .flexwrapper {
        display: flex;
        align-self: flex-end;
    }
    .flexwrapper img {
        margin-top: 20px;
    }
    .inlinewrapper {
        display: inline;
        text-align: right;
    }
    .gridwrapper {
        display: grid;
        grid-template-columns: 0.2fr 0.2fr 0.2fr 0.4fr;
        gap: 5px;
    }
    .centerwrapper {
        text-align: center;
    }
    .inlineblockwrapper {
        display: inline-block;
    }
    .twocolumn {
        display: grid;
        grid-template-columns: 0.75fr 0.25fr;
    }
    .evencolumn {
        display: grid;
        grid-template-columns: 0.5fr 0.5fr;
    }
    .marginright {
        margin-right: 6px;
    }
    .margintop {
        margin-top: 6px;
    }
    input.checkboxfix {
        margin-top: 0px;
    }
    .hideablepanel {
        padding-left: 5px;
        text-align: left;
        width: 900px;
        height: 25px;
        perspective: 4px;
        border: 1px solid;
        border-color: rgb(51, 51, 51);
        border-radius: 4px;
        box-shadow: 4px 2px 8px 2px rgba(0,0,0,0.1);
        cursor: pointer;
    }
    .panelcontents {
        width: inherit;
        display: none;
        margin-left: -6px;
        border: 1px solid;
        border-color: rgb(51, 51, 51);
        background-color: rgba(255,255,255,1);
    }
    .panelitem {
        padding: 3px;
        background-color: rgba(255,255,255,1);
        overflow: auto;
    }
    iframe {
        border: 0px solid black;
    }
    #puzzle-frame {
        width: 100%;
        height: 100vh;
    }
    #pdf-frame {
        width: 100%;
        height: 100vh;
    }
    #img-frame {
        width: 100%;
    }
</style>

@if (!Model.Event.EmbedPuzzles) {
    <h2>Submissions for @RawHtmlHelper.Display(Model.Puzzle.Name, Model.Event.ID, Html)</h2>
    <hr />
    <div>
        @if (Model.IsPuzzleForSinglePlayer == true)
        {
            <a asp-page="/Puzzles/SinglePlayerPuzzles">Back to puzzle list</a>
        }
        else
        {
            <a asp-page="/Teams/Play" asp-route-teamId="@Model.Team.ID">Back to puzzle list</a>
        }
    </div>
    <br />
    @if (!string.IsNullOrEmpty(Model.Puzzle.Errata))
    {
        <div style="font-size:16px;">
            <span style="color: red; font-weight:600;">&#x26A0; Errata: </span>@Model.Puzzle.Errata
        </div>
        <br />
    }

    @if (Model.Puzzle.HasDataConfirmation)
    {
        <div style="font-style:italic;">
            <img src="~/images/DataConfirmationIcon.png" width="20" height="20" style="margin-bottom:3px" /> Reminder: This puzzle supports data confirmation
        </div>
        <br />
    }

    @if (!string.IsNullOrEmpty(Model.AnswerToken))
    {
        <div class="alert alert-success" role="alert">
            <h4>Correct</h4>
            <span>Answer: @Model.AnswerToken</span>
        </div>

        @if (Model.PuzzleState.SolvedTime > Model.Event.AnswerSubmissionEnd)
        {
            <div class="alert alert-warning" role="alert">
                <span>You solved this after the event ended and it did not count toward your ranking.</span>
            </div>
        }
    }
    else if (DateTime.UtcNow < Model.Event.EventBegin)
    {
        <div class="col-md-12" style="padding-bottom: 15px;">
            <h3>This event is not yet in session. No submissions will be accepted at this time.</h3>
        </div>
    }
    else if (Model.PuzzleState.IsEmailOnlyMode)
    {
        <div class="alert alert-danger" role="alert">
            <h4>Answer Submission Locked Indefinitely</h4>
            <span>You've submitted too many wrong responses. Please <a href="@mailtoUrl">use this link to email us your answer for @Model.Puzzle.PlaintextName or ask for help</a>.</span>
        </div>
    }
    else if (Model.PuzzleState.IsLockedOut)
    {
        <div class="alert alert-danger" role="alert">
            <h4>Answer Submission Locked</h4>
            <span>You're locked out. Please wait <span id="LockoutTimer">@Model.PuzzleState.LockoutTimeRemaining.ToString(@"mm\:ss")</span> before attempting another submission.</span>
        </div>
    }
    else if (Model.PuzzlesCausingGlobalLockout.Count != 0 && !Model.PuzzlesCausingGlobalLockout.Contains(Model.Puzzle))
    {
        <div class="alert alert-danger" role="alert">
            <h4>Answer Submission Locked</h4>
            <span>You're in global lockout until time expires on <a href="./@Model.PuzzlesCausingGlobalLockout[0].ID" target="_blank">@Model.PuzzlesCausingGlobalLockout[0].Name</a>, or it is solved. @(Model.IsPuzzleForSinglePlayer ? "" : "Go help your teammates with that puzzle!")</span>
        </div>
    }
    else if (Model.PuzzleState.UnlockedTime == null)
    {
        <div class="alert alert-danger" role="alert">
            <h4>Answer Submission Locked</h4>
            <span>This puzzle is currently locked! Please <a href="@mailtoUrl">use this link to email us if you think this is a mistake</a>.</span>
        </div>
    }
    else
    {
        if (DateTime.UtcNow > @Model.Event.AnswerSubmissionEnd)
        {
            <div class="alert alert-warning" role="alert">
                <h4>The event is over.</h4>
                <span>You may check answers, but they will not count toward your ranking.</span>
            </div>
        }

        if (!string.IsNullOrEmpty(Model.AnswerRedAlertMessage))
        {
            <div class="alert alert-danger" role="alert">
                <h4>@Model.AnswerRedAlertMessage</h4>
            </div>
        }

        if (!string.IsNullOrEmpty(Model.AnswerYellowAlertMessage))
        {
            <div class="alert alert-warning" role="alert">
                <h4>@Model.AnswerYellowAlertMessage</h4>
            </div>
        }

        <div class="row">
            <div class="col-md-4">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label class="control-label">Answer</label>
                        <input name="submissionText" class="form-control" data-val="true" data-val-required="Your answer cannot be empty" />
                        <span style="font-size:12px">Submitted answers will automatically be capitalized and stripped of non-alphanumeric characters</span><br />
                        @Html.ValidationSummary(true)
                        <span class="text-danger"><span class="field-validation-valid" data-valmsg-for="submissionText" data-valmsg-replace="true"></span></span>
                        @if (Model.Puzzle.IsFreeform)
                        {
                            <div class="checkbox">
                                <label class="control-label" for="allowFreeformSharing">
                                    <input type="checkbox" name="allowFreeformSharing" asp-for="AllowFreeformSharing" />
                                    Allow other players to see this after the event
                                </label>
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </form>
            </div>
        </div>
    }

    @if (Model.SubmissionViews.Count > 0)
    {
        <h3>Submission history</h3>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Time Submitted
                        </th>
                        <th>
                            Name
                        </th>
                        <th>
                            Submission Text
                        </th>
                        <th>
                            Response
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = Model.SubmissionViews.Count - 1; i >= 0; --i)
                    {
                        <tr>
                            <td>
                                @Html.Raw(Model.LocalTime(Model.SubmissionViews[i].Submission.TimeSubmitted))
                            </td>
                            <td>
                                @(Model.SubmissionViews[i].SubmitterName)
                            </td>
                            <td>
                                @(Model.SubmissionViews[i].Submission.SubmissionText)
                            </td>
                            <td>
                                @{
                                    var response = Model.SubmissionViews[i].Response;

                                    if (response == null)
                                    {
                                        if (Model.SubmissionViews[i].IsFreeform)
                                        {
                                            if (Model.SubmissionViews[i].Submission.FreeformAccepted != null)
                                            {
                                                @(Model.SubmissionViews[i].FreeformReponse);
                                            }
                                            else if (Model.PuzzleState.SolvedTime == null)
                                            {
                                                <text>Pending...</text>
                                            }
                                        }
                                        else
                                        {
                                            <text>@IndexModel.IncorrectResponseText</text>
                                        }
                                    }
                                    else
                                    {
                                        @ServerCore.Helpers.RawHtmlHelper.Display(response.ResponseText, Model.Event.ID, Html);
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (!Model.PuzzleState.IsEmailOnlyMode)
    {
        <h3>Need some help?</h3>
        <p>While solving this puzzle, if you've run into a bug, think there's an error, or are not having fun anymore, <a href="@mailtoUrl">use this link to contact the author for @Model.Puzzle.PlaintextName</a>!</p>
        <p>A pre-populated email form will appear and you should add details to the message body. Remember: the author may only know specifics about this puzzle and not others in the event.</p>
    }

    @if (Model.Event.AllowFeedback)
    {
        <h3>Have any feedback?</h3>
        <p><a asp-Page="/Puzzles/SubmitFeedback" asp-route-puzzleid="@Model.Puzzle.ID">Click this link</a> to submit feedback.</p>
    }

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        @if (@Model.PuzzleState.LockoutExpiryTime != null)
        {
            <script type="text/javascript">
                var unlockTime = new Date(Date.UTC(
                @Model.PuzzleState.LockoutExpiryTime.Value.Year,
                @Model.PuzzleState.LockoutExpiryTime.Value.Month-1,
                @Model.PuzzleState.LockoutExpiryTime.Value.Day,
                @Model.PuzzleState.LockoutExpiryTime.Value.Hour,
                @Model.PuzzleState.LockoutExpiryTime.Value.Minute,
                @Model.PuzzleState.LockoutExpiryTime.Value.Second));

                setInterval(function () {
                    var timer = document.getElementById("LockoutTimer");
                    if (timer === null) {
                        return;
                    }
                    var timeDeltaSeconds = Math.floor((unlockTime - Date.now()) / 1000);
                    if (timeDeltaSeconds <= 0) {
                        window.location.href = window.location.href;
                    }
                    // Prevent negative time, also pad with zero
                    var minutesLeft = "0" + Math.max(0, Math.floor(timeDeltaSeconds / 60));
                    var secondsLeft = "0" + Math.max(0, timeDeltaSeconds % 60);
                    timer.innerText = minutesLeft.substr(-2) + ":" + secondsLeft.substr(-2);
                }, 1000);
            </script>
        }
    }
}
else
{
    <div class="twocolumn">
        <div class="flexwrapper">
            <div><h2><b>@RawHtmlHelper.Display(Model.Puzzle.Name, Model.Event.ID, Html)</b></h2></div>&nbsp;&nbsp;
            @if (Model.Puzzle.HasDataConfirmation)
            {
                <img src="~/images/DataConfirmationIcon.png" width="30" height="30" style="margin-bottom:3px" title="Reminder: This puzzle supports data confirmation" />
            }
        </div>
        <div class="inlinewrapper">
            <br /><h4>by @RawHtmlHelper.Display(Model.PuzzleAuthor, Model.Event.ID, Html)</h4>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Puzzle.Errata))
    {
        <div><span style="color: red; font-weight:600;">&#x26A0; Errata: </span>@Model.Puzzle.Errata</div>
        <br />
    }

    <div class="evencolumn">
        <div class="flexwrapper">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <label for="submissionText" class="marginright margintop">Answer:</label>
            <input name="submissionText" id="submitBox" class="form-control marginright" data-val="true" data-val-required="Your answer cannot be empty" />
            <input type="submit" id="submitButton" value="Submit" class="btn btn-default marginright" title="Submitted answers will automatically be capitalized and stripped of non-alphanumeric characters" />
            @Html.ValidationSummary(true)
            <span class="text-danger"><span class="field-validation-valid" data-valmsg-for="submissionText" data-valmsg-replace="true"></span></span>
            @if (Model.Puzzle.IsFreeform)
            {
                <label for="allowFreeformSharing" class="marginright margintop">Sharing: </label>
                <input class="checkboxfix" type="checkbox" name="allowFreeformSharing" asp-for="AllowFreeformSharing" title="Allow other players to see this after the event" />
            }
        </div>
        <div class="inlinewrapper">
            @if (!Model.PuzzleState.IsEmailOnlyMode)
            {
                <div><b>Need help?</b> <a href="@mailtoUrl">Click this link</a> to send an email to the author.</div>
            }

            @if (Model.Event.AllowFeedback)
            {
                <div><b>Have feedback?</b> <a asp-Page="/Puzzles/SubmitFeedback" asp-route-puzzleid="@Model.Puzzle.ID" target="_blank">Click this link</a> to open the feedback form.</div>
            }

            @if (embedType > 2) // HTML files or images
            {
                <div><b>Want to print?</b> <a href="@puzzleFilePath" target="_blank">Click this link</a> for a printable version.</div>
            }
            else if (embedType == 1) // PDFs
            {
                <div><b>Want to print?</b> <a href="@puzzleFilePath" download>Click this link</a> to download the file.</div>
            }
        </div>
    </div>
    <br />
    <div id="initialMessage">
        @if (!string.IsNullOrEmpty(Model.AnswerToken))
        {
            <div class="alert alert-success" role="alert">
                <h4>Correct</h4>
                <span>Answer: @Model.AnswerToken</span>
            </div>

            @if (Model.PuzzleState.SolvedTime > Model.Event.AnswerSubmissionEnd)
            {
                <div class="alert alert-warning" role="alert">
                    <span>You solved this after the event ended and it did not count toward your ranking.</span>
                </div>
            }
        }
        else if (DateTime.UtcNow < Model.Event.EventBegin)
        {
            <div class="col-md-12" style="padding-bottom: 15px;">
                <h3>This event is not yet in session. No submissions will be accepted at this time.</h3>
            </div>
        }
        else if (Model.PuzzleState.IsEmailOnlyMode)
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked Indefinitely</h4>
                <span>You've submitted too many wrong responses. Please <a href="@mailtoUrl">use this link to email us your answer for @Model.Puzzle.PlaintextName or ask for help</a>.</span>
            </div>
        }
        else if (Model.PuzzleState.IsLockedOut)
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked</h4>
                <span>You're locked out. Please wait <span id="LockoutTimer">@Model.PuzzleState.LockoutTimeRemaining.ToString(@"mm\:ss")</span> before attempting another submission.</span>
            </div>
        }
        else if (Model.PuzzlesCausingGlobalLockout.Count != 0 && !Model.PuzzlesCausingGlobalLockout.Contains(Model.Puzzle))
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked</h4>
                <span>You're in global lockout until time expires on <a href="./@Model.PuzzlesCausingGlobalLockout[0].ID" target="_blank">@Model.PuzzlesCausingGlobalLockout[0].Name</a>, or it is solved. @(Model.IsPuzzleForSinglePlayer ? "" : "Go help your teammates with that puzzle!")</span>
            </div>
        }
        else if (Model.PuzzleState.UnlockedTime == null)
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked</h4>
                <span>This puzzle is currently locked! Please <a href="@mailtoUrl">use this link to email us if you think this is a mistake</a>.</span>
            </div>
        }
        else
        {
            @if (DateTime.UtcNow > @Model.Event.AnswerSubmissionEnd)
            {
                <div class="alert alert-warning" role="alert">
                    <h4>The event is over.</h4>
                    <span>You may check answers, but they will not count toward your ranking.</span>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.AnswerRedAlertMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <h4>@Model.AnswerRedAlertMessage</h4>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.AnswerYellowAlertMessage))
            {
                <div class="alert alert-warning" role="alert">
                    <h4>@Model.AnswerYellowAlertMessage</h4>
                </div>
            }
        }
    </div>
    <div class="centerwrapper">
        <div class="inlineblockwrapper">
            <div id="submissionHistory" style="display: @((Model.SubmissionViews.Count == 0) ? "none" : "block")" class="hideablepanel">
                Click here to view previous submissions:<span class="caret"></span>
                <div class="panelcontents" style="display: none">
                    <div class="gridwrapper">
                        <div class="panelitem"><b>Time Submitted</b></div>
                        <div class="panelitem"><b>Name</b></div>
                        <div class="panelitem"><b>Submission Text</b></div>
                        <div class="panelitem"><b>Response</b></div>
                    </div>
                    @for (int i = Model.SubmissionViews.Count - 1; i >= 0; --i)
                    {
                        <div class="gridwrapper">
                            <div class="panelitem">@Html.Raw(Model.LocalTime(Model.SubmissionViews[i].Submission.TimeSubmitted))</div>
                            <div class="panelitem">@(Model.SubmissionViews[i].SubmitterName)</div>
                            <div class="panelitem">@(Model.SubmissionViews[i].Submission.SubmissionText)</div>
                            @{
                                var response = Model.SubmissionViews[i].Response;

                                if (response == null)
                                {
                                    if (Model.SubmissionViews[i].IsFreeform)
                                    {
                                        if (Model.SubmissionViews[i].Submission.FreeformAccepted != null)
                                        {
                                            <div class="panelitem">@(Model.SubmissionViews[i].FreeformReponse)</div>
                                        }
                                        else if (Model.PuzzleState.SolvedTime == null)
                                        {
                                            <div class="panelitem">Pending...</div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="panelitem">@IndexModel.IncorrectResponseText</div>
                                    }
                                }
                                else
                                {
                                    <div class="panelitem">@ServerCore.Helpers.RawHtmlHelper.Display(response.ResponseText, Model.Event.ID, Html)</div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <br />

    @switch (embedType)
    {
        case 1: // PDF
            <object id="pdf-frame" title="@Model.Puzzle.Name" data="@puzzleFilePath" type="application/pdf">
                <embed src="@puzzleFilePath" type="application/pdf" />
            </object>
            break;
        case 2: // Files that can't be embedded
            <div><b>This puzzle can't be displayed here.</b> <a href="@puzzleFilePath" download>Click this link</a> to download the file.</div>
            break;
        case 3: // HTML
            if (puzzleFilePath.Contains('?'))
            {
                puzzleFilePath += "&";
            }
            else
            {
                puzzleFilePath += "?";
            }
            puzzleFilePath += "embed=true";
            <iframe id="puzzle-frame" title="@Model.Puzzle.Name" sandbox="allow-same-origin allow-scripts allow-popups" src="@puzzleFilePath"></iframe>
            break;
        case 4: // Images
            <img id="img-frame" src="@puzzleFilePath" alt="An image containing a puzzle" />
            break;
    }

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        @if (@Model.PuzzleState.LockoutExpiryTime != null)
        {
            <script type="text/javascript">
                var unlockTime = new Date(Date.UTC(
                @Model.PuzzleState.LockoutExpiryTime.Value.Year,
                @Model.PuzzleState.LockoutExpiryTime.Value.Month-1,
                @Model.PuzzleState.LockoutExpiryTime.Value.Day,
                @Model.PuzzleState.LockoutExpiryTime.Value.Hour,
                @Model.PuzzleState.LockoutExpiryTime.Value.Minute,
                @Model.PuzzleState.LockoutExpiryTime.Value.Second));

                setInterval(function () {
                    var timer = document.getElementById("LockoutTimer");
                    if (timer === null) {
                        return;
                    }
                    var timeDeltaSeconds = Math.floor((unlockTime - Date.now()) / 1000);
                    if (timeDeltaSeconds <= 0) {
                        window.location.href = window.location.href;
                    }
                    // Prevent negative time, also pad with zero
                    var minutesLeft = "0" + Math.max(0, Math.floor(timeDeltaSeconds / 60));
                    var secondsLeft = "0" + Math.max(0, timeDeltaSeconds % 60);
                    timer.innerText = minutesLeft.substr(-2) + ":" + secondsLeft.substr(-2);
                }, 1000);
            </script>
        }
        <script type="text/javascript">
            window.addEventListener("load", () => {

                // Make previous puzzle responses hideable
                const headers = document.querySelectorAll(".hideablepanel");
                for (const header of headers) {
                    header.addEventListener("click", (e) => {
                        let list = null;
                        if (e.target.classList.contains("caret")) {
                            list = e.target.nextElementSibling;
                        }
                        else if (e.target.classList.contains("hideablepanel")) {
                            list = e.target.lastElementChild;
                        }
                        if (list !== null) {
                            list.style.display = (list.style.display == "none") ? "block" : "none";
                        }
                    });
                }

                // Add the Submit button click handler
                // Submission conversion mirrors what takes place in DataModel\Response::FormatSubmission
                // For local testing, set host to http://localhost:44319
                // Note that AllowFreeformSharing uses string trickery due to C# returning a Boolean value instead of a boolean value
                const submit = document.querySelector("#submitButton");
                async function submitClickHandler (e) {
                    const rawText = document.querySelector("#submitBox").value;
                    const cleanedText = rawText.normalize("NFKD").replace(/[^a-zA-Z\d]/gi, "").toUpperCase();
                    let submission = {SubmissionText: cleanedText, AllowFreeformSharing: @Model.Puzzle.IsFreeform.ToString().ToLower()};
                    const response = await fetch("/api/puzzleapi/submitanswer/@Model.Event.ID/@Model.Puzzle.ID", {
                        method: "POST", mode: "cors", headers: { "Content-Type": "application/json" }, body: JSON.stringify(submission), credentials: "include"});
                    const responseData = await response.json();
                    
                    // When the response data is back, add it to the page
                    // Also clear the previous response from the page
                    // Response Code enum is in Helpers/SubmissionEvaluator
                    const messageArea = document.querySelector("#initialMessage");
                    let updateVal = "";
                    switch (responseData.responseCode) {
                        case 0: // Correct
                            const dateString = `@Model.Event.AnswerSubmissionEnd.ToString("YYYY-MM-DDTHH:mm:ss.sssZ")`;
                            updateVal = `<div class="alert alert-success" role="alert"><h4>Correct</h4><span>Answer: ` + cleanedText + `</span></div>`;
                            updateVal += ((Date.now() > Date.parse(dateString).valueOf()) ? `<div class="alert alert-warning" role="alert"><span>You solved this after the event ended and it did not count toward your ranking.</span></div>` : ``);
                            break;
                        case 1: // Incorrect
                            updateVal = `<div class="alert alert-danger" role="alert">` + cleanedText + ": " + `@IndexModel.IncorrectResponseText</div>`;
                            break;
                        case 2: // Freeform
                            updateVal = `<div class="alert alert-warning" role="alert">` + cleanedText + ": " + responseData.freeformResponse + `</div>`;
                            break;
                        case 3: // Partial
                            updateVal = `<div class="alert alert-warning" role="alert">` + cleanedText + ": " + responseData.completeResponse + `</div>`;
                            break;
                        case 4: // Unauthorized
                            updateVal = `<div class="alert alert-danger" role="alert">You don't appear to have access to this puzzle, so your answer has not been recorded.</div>`;
                            break;
                        case 5: // Puzzle not found
                            updateVal = `<div class="alert alert-danger" role="alert">This puzzle can't be found in the system, so your answer has not been recorded.</div>`;
                            break;
                        case 6: // Puzzle Locked
                            updateVal = `<div class="alert alert-danger" role="alert"><h4>Answer Submission Locked</h4><span>This puzzle is currently locked! Please <a href="@mailtoUrl">use this link to email us if you think this is a mistake</a>.</span></div>`;
                            break;
                        case 7: // Empty
                            updateVal = `<div class="alert alert-danger" role="alert">No valid characters were found in this submission. Please try something else.</div>`;
                            break;
                        case 8: // Team locked out
                            updateVal = `<div class="alert alert-danger" role="alert"><h4>Answer Submission Locked</h4><span>You're locked out. Please wait a while before attempting another submission.</span></div>`;
                            break;
                        case 9: // Already solved
                            updateVal = `<div class="alert alert-warning" role="alert">This puzzle has already been solved.</div>`;
                            break;
                        case 10: // Duplicate submission
                            updateVal = `<div class="alert alert-warning" role="alert">You've already submitted ` + cleanedText + `.</div>`;
                            break;
                    }
                    messageArea.innerHTML = updateVal;

                    // Also add the submission to the list of submissions
                    if (responseData.responseCode < 4) { // Correct, Incorrect, Freeform, Partial
                        const wrapper = document.createElement("div");
                        wrapper.classList.add("gridwrapper");
                        const time = document.createElement("div");
                        time.classList.add("panelitem");
                        const dateStamp = new Intl.DateTimeFormat("en-US", {year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", second: "numeric"});
                        time.innerText = dateStamp.format(Date.now());
                        wrapper.appendChild(time);
                        const name = document.createElement("div");
                        name.classList.add("panelitem");
                        name.innerText = "@Model.LoggedInUser.Name";
                        wrapper.appendChild(name);
                        const text = document.createElement("div");
                        text.classList.add("panelitem");
                        text.innerText = cleanedText;
                        wrapper.appendChild(text);
                        const resp = document.createElement("div");
                        resp.classList.add("panelitem");
                        resp.innerText = (responseData.completeResponse ?? "") + (responseData.freeformResponse ?? "");
                        resp.innerText += ((resp.innerText.length == 0) ? ((responseData.responseCode == 0) ? "Correct!" : "Incorrect") : "");
                        wrapper.appendChild(resp);
                        const answerPanel = document.querySelector("#submissionHistory div.panelcontents");
                        answerPanel.firstElementChild.after(wrapper);
                        document.getElementById("submissionHistory").style.display = "block";
                    }
                    rawText.value = "";
                }
                submit.addEventListener("click", submitClickHandler);

                // Make hitting enter in the answer box trigger a submission
                const submitBox = document.querySelector("#submitBox");
                submitBox.addEventListener("keydown", (e) => {
                    if (e.key === "Enter") {
                        e.preventDefault();
                        document.querySelector("#submitButton").click();
                    }
                });

                // Resize iframe so the frame has no scrollbars
                // By the time the window has loaded, the iframe contents should have as well, thus no iframe load listener
                // Note that when the puzzle receives the message, it should remove any extraneous wrapping before reporting its size
                const iframe = document.querySelector("iframe");
                if ((iframe !== null) && (iframe !== undefined)) {
                    iframe.contentWindow.postMessage("", "*");
                }
            });

            // When the iframe response comes, use it to set the iframe's size
            // Removing the iframe's id removes the hard-coded css size
            // The extra 25px added to the size undoes the widths of the scrollbars themselves
            window.addEventListener("message", (e) => {
                if ((e.data.width > 0) && (e.data.height > 0)) {
                    const iframe = document.querySelector("iframe");
                    iframe.id = ""; 
                    iframe.width = e.data.width + 25;
                    iframe.height = e.data.height + 25;
                }
            });
        </script>
    }
}
