@page "/{eventId}/{eventRole}/Submissions/{puzzleId}"
@model ServerCore.Pages.Submissions.IndexModel

@{
    @using Helpers;

    ViewData["Title"] = "Create submissions";
    ViewData["AdminRoute"] = "../Submissions/AuthorIndex";
    ViewData["AuthorRoute"] = "../Submissions/AuthorIndex";
    // TODO: Needs to handle implicit teams - ViewData["PlayRoute"] = "../Submissions/Index";
    ViewData["RoutingPuzzleId"] = ViewContext.RouteData.Values["puzzleId"];
}

@using System.Text @* for StringBuilder *@

@{
    var mailtoUrl = new StringBuilder("mailto:");

    // to: Add the proper support agent as recipient
    mailtoUrl.Append(Model.PuzzleState?.Puzzle.SupportEmailAlias ?? (Model.Event?.ContactEmail ?? "puzzhunt@microsoft.com"));
    // CC the team's email address in case the account sending the e-mail is a personal one that's not associated with the event
    if (Model.Team.PrimaryContactEmail != null)
    {
        mailtoUrl.Append("?cc=");
        mailtoUrl.Append(Uri.EscapeDataString(Model.Team.PrimaryContactEmail));
    }

    // subject: Make this be about this puzzle
    mailtoUrl.Append("&subject=");
    mailtoUrl.Append(Uri.EscapeDataString("[" + Model.Puzzle.PlaintextName + "]"));
    // subject: Make this be from this team
    mailtoUrl.Append(Uri.EscapeDataString(" [" + Model.Team.Name + "]"));

    if (Model.PuzzleState.IsEmailOnlyMode)
    {
        // request out of email mode
        // subject: Add the Email Mode signifier
        mailtoUrl.Append(Uri.EscapeDataString(" [⚠EmailMode✉]"));
        // body: Invite solver to give details
        mailtoUrl.Append("&body=");
        mailtoUrl.Append(Uri.EscapeDataString("Use this email to fully explain your thought process so we know you're not randomly spamming attempts! 😇" + Environment.NewLine + Environment.NewLine));
    }
    else
    {
        // request for help
        // body: Invite solver to give details
        mailtoUrl.Append("&body=");
        mailtoUrl.Append(Uri.EscapeDataString("The more details you add here, the more helpful the responses you'll get will be! 😇" + Environment.NewLine + Environment.NewLine));
    }
}



<h2>Submissions for @RawHtmlHelper.Display(Model.Puzzle.Name, Model.Event.ID, Html)</h2>
<hr />
<div>
    <a asp-page="/Teams/Play" asp-route-teamId="@Model.Team.ID">Back to puzzle list</a>
</div>
<br />
@if (!string.IsNullOrEmpty(Model.Puzzle.Errata))
{
    <div style="font-size:16px;">
        <span style="color: red; font-weight:600;">&#x26A0; Errata: </span>@Model.Puzzle.Errata
    </div>
    <br />
}
        @if (Model.Puzzle.HasDataConfirmation)
        {
            <div style="font-style:italic;">
                <img src="~/images/DataConfirmationIcon.png" width="20" height="20" style="margin-bottom:3px" /> Reminder: This puzzle supports data confirmation
            </div>
            <br />
        }
        @if (!string.IsNullOrEmpty(Model.AnswerToken))
        {
            <div class="alert alert-success" role="alert">
                <h4>Correct</h4>
                <span>Answer: @Model.AnswerToken</span>
            </div>

            @if (Model.PuzzleState.SolvedTime > Model.Event.AnswerSubmissionEnd)
            { 
                <div class="alert alert-warning" role="alert">
                    <span>You solved this after the event ended and it did not count toward your ranking.</span>
                </div>
            }
        }
        else if (DateTime.UtcNow < Model.Event.EventBegin)
        {
            <div class="col-md-12" style="padding-bottom: 15px;">
                <h3>This event is not yet in session. No submissions will be accepted at this time.</h3>
            </div>
        }
        else if (Model.PuzzleState.IsEmailOnlyMode)
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked Indefinitely</h4>
                <span>You've submitted too many wrong responses. Please <a href="@mailtoUrl">use this link to email us your answer for @Model.Puzzle.PlaintextName or ask for help</a>.</span>
            </div>
        }
        else if (Model.PuzzleState.IsTeamLockedOut)
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked</h4>
                <span>You're locked out. Please wait <span id="LockoutTimer">@Model.PuzzleState.LockoutTimeRemaining.ToString(@"mm\:ss")</span> before attempting another submission.</span>
            </div>
        }
        else if (Model.PuzzlesCausingGlobalLockout.Count != 0 && !Model.PuzzlesCausingGlobalLockout.Contains(Model.Puzzle))
        {
            <div class="alert alert-danger" role="alert">
                <h4>Answer Submission Locked</h4>
                <span>You're in global lockout until time expires on <a href="./@Model.PuzzlesCausingGlobalLockout[0].ID" target="_blank">@Model.PuzzlesCausingGlobalLockout[0].Name</a>, or it is solved. Go help your teammates with that puzzle!</span>
            </div>
        }
        else
        {
            if (DateTime.UtcNow > @Model.Event.AnswerSubmissionEnd)
            {
                <div class="alert alert-warning" role="alert">
                    <h4>The event is over.</h4>
                    <span>You may check answers, but they will not count toward your ranking.</span>
                </div>
            }

            if (!string.IsNullOrEmpty(Model.AnswerRedAlertMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <h4>@Model.AnswerRedAlertMessage</h4>
                </div>
            }

            if (!string.IsNullOrEmpty(Model.AnswerYellowAlertMessage))
            {
                <div class="alert alert-warning" role="alert">
                    <h4>@Model.AnswerYellowAlertMessage</h4>
                </div>
            }

            <div class="row">
                <div class="col-md-4">
                    <form method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-group">
                            <label class="control-label">Answer</label>
                            <input name="submissionText" class="form-control" data-val="true" data-val-required="Your answer cannot be empty" />
                            <span style="font-size:12px">Submitted answers will automatically be capitalized and stripped of non-alphanumeric characters</span><br />
                            @Html.ValidationSummary(true)
                            <span class="text-danger"><span class="field-validation-valid" data-valmsg-for="submissionText" data-valmsg-replace="true"></span></span>
                            @if (Model.Puzzle.IsFreeform)
                            {
                                <div class="checkbox">
                                    <label class="control-label" for="allowFreeformSharing">
                                        <input type="checkbox" name="allowFreeformSharing" asp-for="AllowFreeformSharing" />
                                        Allow other players to see this after the event
                                    </label>
                                </div>
                            }
                        </div>
                        <div class="form-group">
                            <input type="submit" value="Submit" class="btn btn-default" />
                        </div>
                    </form>
                </div>
            </div>
        }

@if (Model.SubmissionViews.Count > 0)
{
    <h3>Submission history</h3>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Time Submitted
                    </th>
                    <th>
                        Name
                    </th>
                    <th>
                        Submission Text
                    </th>
                    <th>
                        Response
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = Model.SubmissionViews.Count - 1; i >= 0; --i)
                {
                    <tr>
                        <td>
                            @Html.Raw(Model.LocalTime(Model.SubmissionViews[i].Submission.TimeSubmitted))
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => Model.SubmissionViews[i].SubmitterName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => Model.SubmissionViews[i].Submission.SubmissionText)
                        </td>
                        <td>
                            @{
                                var response = Model.SubmissionViews[i].Response;

                                if (response == null)
                                {
                                    if (Model.SubmissionViews[i].IsFreeform)
                                    {
                                        if (Model.SubmissionViews[i].Submission.FreeformAccepted != null)
                                        {
                                            @Html.DisplayFor(modelItem => Model.SubmissionViews[i].FreeformReponse);
                                        }
                                        else if (Model.PuzzleState.SolvedTime == null)
                                        {
                                            <text>Pending...</text>
                                        }
                                    }
                                    else
                                    {
                                        <text>@IndexModel.IncorrectResponseText</text>
                                    }
                                }
                                else
                                {
                                    @ServerCore.Helpers.RawHtmlHelper.Display(response.ResponseText, Model.Event.ID, Html);
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (!Model.PuzzleState.IsEmailOnlyMode)
{ 
    <h3>Need some help?</h3>
    <p>While solving this puzzle, if you've run into a bug, think there's an error, or are not having fun anymore, <a href="@mailtoUrl">use this link to contact the author for @Model.Puzzle.PlaintextName</a>!</p>
    <p>A pre-populated email form will appear and you should add details to the message body. Remember: the author may only know specifics about this puzzle and not others in the event.</p>
}

@if (Model.Event.AllowFeedback) 
{
    <h3>Have any feedback?</h3>
    <p><a asp-Page="/Puzzles/SubmitFeedback" asp-route-puzzleid="@Model.Puzzle.ID">Click this link</a> to submit feedback.</p>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @if (@Model.PuzzleState.LockoutExpiryTime != null)
    {
        <script type="text/javascript">
            var unlockTime = new Date(Date.UTC(
                @Model.PuzzleState.LockoutExpiryTime.Value.Year,
                @Model.PuzzleState.LockoutExpiryTime.Value.Month-1,
                @Model.PuzzleState.LockoutExpiryTime.Value.Day,
                @Model.PuzzleState.LockoutExpiryTime.Value.Hour,
                @Model.PuzzleState.LockoutExpiryTime.Value.Minute,
                @Model.PuzzleState.LockoutExpiryTime.Value.Second));

            setInterval(function () {
                var timer = document.getElementById("LockoutTimer");
                if (timer === null) {
                    return;
                }
                var timeDeltaSeconds = Math.floor((unlockTime - Date.now()) / 1000);
                if (timeDeltaSeconds <= 0) {
                    window.location.href = window.location.href;
                }
                // Prevent negative time, also pad with zero
                var minutesLeft = "0" + Math.max(0, Math.floor(timeDeltaSeconds / 60));
                var secondsLeft = "0" + Math.max(0, timeDeltaSeconds % 60);
                timer.innerText = minutesLeft.substr(-2) + ":" + secondsLeft.substr(-2);
            }, 1000);
        </script>
    }
}
