@page "/{eventId}/{eventRole}/Submissions/{puzzleId}"
@model ServerCore.Pages.Submissions.IndexModel

@{
    ViewData["Title"] = "Create submissions";
    ViewData["AdminRoute"] = "../Submissions/AuthorIndex";
    ViewData["AuthorRoute"] = "../Submissions/AuthorIndex";
    // TODO: Needs to handle implicit teams - ViewData["PlayRoute"] = "../Submissions/Index";
    ViewData["RoutingPuzzleId"] = ViewContext.RouteData.Values["puzzleId"];
}

<h2>Submissions for @Model.Puzzle.Name</h2>
<hr />
<div>
    <a asp-page="/Teams/Play" asp-route-teamId="@Model.Team.ID">Back to puzzle list</a>
</div>
<br />
@if (!string.IsNullOrEmpty(Model.Puzzle.Errata))
{
    <div style="font-size:16px;">
        <span style="color: red; font-weight:600;">&#x26A0; Errata: </span>@Model.Puzzle.Errata
    </div>
    <br />
}
<div class="row">
    <div class="col-md-4">
        @if (Model.Puzzle.HasDataConfirmation)
        {
        <div style="font-style:italic;">
            <img src="~/images/DataConfirmationIcon.png" width="20" height="20" style="margin-bottom:3px" /> Reminder: This puzzle supports data confirmation
        </div>
            <br />
        }
        @if (!string.IsNullOrEmpty(Model.AnswerToken))
        {
            <div class="alert alert-success" role="alert">
                You got it! Correct answer: @Model.AnswerToken
            </div>
        }
        else if (!@Model.Event.IsAnswerSubmissionActive)
        {
            <div class="col-md-12" style="padding-bottom: 15px;">
                <h3>This event is not in session. No submissions will be accepted at this time.</h3>
            </div>
        }
        else if (Model.PuzzleState.IsEmailOnlyMode)
        {
            <div class="alert alert-danger" role="alert">
                You have submitted too many wrong responses. Please email your solutions to <a href="mailto:@(Model.PuzzleState?.Puzzle.SupportEmailAlias ?? (Model.Event?.ContactEmail ?? "puzzhunt@microsoft.com"))">@(Model.PuzzleState?.Puzzle.SupportEmailAlias ?? (Model.Event?.ContactEmail ?? "puzzhunt@microsoft.com"))</a>.
            </div>
        }
        else if (Model.PuzzleState.IsTeamLockedOut)
        {
            <div class="alert alert-danger" role="alert">
                You are locked out. Please wait <span id="LockoutTimer">@Model.PuzzleState.LockoutTimeRemaining.ToString(@"mm\:ss")</span> before attempting another submission.
            </div>
        }
        else if (Model.PuzzlesCausingGlobalLockout.Count != 0 && !Model.PuzzlesCausingGlobalLockout.Contains(Model.Puzzle))
        {
            <div class="alert alert-danger" role="alert">
                You are in global lockout until time expires on '@Model.PuzzlesCausingGlobalLockout[0].Name', or it is solved. Go help your teammates with that puzzle!
            </div>
        }
        else
        {
             if (Model.DuplicateSubmission)
            {
                <div class="alert alert-danger" role="alert">
                    You already submitted @Model.SubmissionText!
                </div>
            }

            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label class="control-label">Answer</label>
                    <input name="submissionText" class="form-control" data-val="true" data-val-required="Your answer cannot be empty" />
                    <span style="font-size:12px">Submitted answers will automatically be capitalized and stripped of non-alphanumeric characters</span><br />
                    @Html.ValidationSummary(true)
                    <span class="text-danger"><span class="field-validation-valid" data-valmsg-for="submissionText" data-valmsg-replace="true"></span></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Submit" class="btn btn-default" />
                </div>
            </form>
        }
    </div>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Time Submitted
                </th>
                <th>
                    Name
                </th>
                <th>
                    Submission Text
                </th>
                <th>
                    Response
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = Model.SubmissionViews.Count-1; i >= 0; --i)
            {
                <tr>
                    <td>
                        @Html.Raw(Model.LocalTime(Model.SubmissionViews[i].Submission.TimeSubmitted))
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.SubmissionViews[i].SubmitterName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.SubmissionViews[i].Submission.SubmissionText)
                    </td>
                    <td>
                        @(Model.SubmissionViews[i].Response != null ? Model.SubmissionViews[i].Response.ResponseText : "Incorrect")
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @if (@Model.PuzzleState.LockoutExpiryTime != null)
    {
        <script type="text/javascript">
            var unlockTime = new Date(Date.UTC(
                @Model.PuzzleState.LockoutExpiryTime.Value.Year,
                @Model.PuzzleState.LockoutExpiryTime.Value.Month-1,
                @Model.PuzzleState.LockoutExpiryTime.Value.Day,
                @Model.PuzzleState.LockoutExpiryTime.Value.Hour,
                @Model.PuzzleState.LockoutExpiryTime.Value.Minute,
                @Model.PuzzleState.LockoutExpiryTime.Value.Second));

            setInterval(function () {
                var timer = document.getElementById("LockoutTimer");
                if (timer === null) {
                    return;
                }
                var timeDeltaSeconds = Math.floor((unlockTime - Date.now()) / 1000);
                if (timeDeltaSeconds <= 0) {
                    window.location.reload(false);
                }
                var minutesLeft = Math.floor(timeDeltaSeconds / 60);
                var secondsLeft = timeDeltaSeconds % 60;
                timer.innerText = minutesLeft + ":" + (secondsLeft < 10 ? "0" + secondsLeft : secondsLeft);
            }, 1000);
        </script>
    }
}
